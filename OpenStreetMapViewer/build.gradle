description = 'OpenMap in the Play Store, the example app for using osmdroid'

apply plugin: 'com.android.application'
apply from: "$rootDir/gradle/android-signing.gradle"


group = project.property("pom.groupId")
version = project.property("pom.version")

android {
    namespace = 'org.osmdroid' // Add this line
    compileSdk = findProperty('android.compileSdkVersion').toInteger()


    defaultConfig {
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"


        applicationId = "org.osmdroid"

        minSdkVersion 23
        multiDexEnabled = true

        compileSdk = project.hasProperty('android.compileSdkVersion')
                ? Integer.parseInt(project.property('android.compileSdkVersion')) : 35

        // default targetSdkVersion to API 23, if not provided
        targetSdkVersion(project.hasProperty('android.targetSdkVersion')
                ? Integer.parseInt(project.property('android.targetSdkVersion')) : 30)

        // default versionCode o 1 if not provided
        versionCode(project.hasProperty('android.versionCode')
                ? Integer.parseInt(project.property('android.versionCode')) : 1)

        versionName project.version
    }
    lintOptions {
        abortOnError = false
        disable 'NonConstantResourceId'
    }

    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    packagingOptions {
        pickFirst "androidsupportmultidexversion.txt"
        pickFirst "META-INF/AL2.0"
        pickFirst "META-INF/LGPL2.1"
    }
    buildFeatures {
        buildConfig = true
    }

}


dependencies {
    //apparently google or gradle changed something so that
    //transitive dependencies of submodules in the same project
    //are not longer resolved...

    //osmdroid-mapsforge
    implementation 'org.mapsforge:mapsforge-map-android:0.21.0'
    implementation 'org.mapsforge:mapsforge-map:0.21.0'
    implementation 'org.mapsforge:mapsforge-themes:0.21.0'

    // Exclude androidsvg JAR from mapsforge-map-android
//    implementation('org.mapsforge:mapsforge-map-android:0.21.0') {
//        exclude group: 'com.caverock', module: 'androidsvg'
//    }

    // Exclude androidsvg JAR from osmdroid-mapsforge (if it's a project dependency)
//    implementation(project(':osmdroid-mapsforge')) {
//        exclude group: 'com.caverock', module: 'androidsvg'
//    }


    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation project(':osmdroid-android')
    implementation project(':osmdroid-geopackage')
    implementation project(':osmdroid-mapsforge')
    implementation project(':osmdroid-wms')
    implementation project(':osmdroid-shape')

    implementation 'io.github.missioncommand:mil-sym-android-renderer:0.1.59'

    //used for various demos for picking offline tile archives
    implementation 'com.github.angads25:filepicker:1.1.1'

    //used for bookmark demo
    implementation group: 'com.opencsv', name: 'opencsv', version: '5.12.0'

    //usual android stuff
    implementation "com.google.android.material:material:1.12.0" //needed for UI menuing
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.4.0"
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "androidx.appcompat:appcompat:1.7.1"
    //crash logging
    implementation 'ch.acra:acra:4.7.0'


    //on device testing
    androidTestImplementation 'androidx.multidex:multidex:2.0.1'
    androidTestImplementation "androidx.annotation:annotation:1.7.1"


    androidTestImplementation "androidx.test:runner:1.7.0"
    androidTestImplementation "androidx.test:rules:1.7.0"
    // Optional -- UI testing with Espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:3.7.0"
    // Optional -- UI testing with UI Automator
    androidTestImplementation "androidx.test.uiautomator:uiautomator:2.3.0"
    // Optional -- UI testing with Compose
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.8.3"
}


//the following sets the required permissions for API 23+ devices and AVDs

android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        tasks.register('"configDevice${variant.name.capitalize()}"', Exec) {
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExecutable().toString()
            def mypermission = 'android.permission.ACCESS_FINE_LOCATION'
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTestProvider.get().dependsOn "configDevice${variant.name.capitalize()}"
    }
}


android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        tasks.register('"configDevice2${variant.name.capitalize()}"', Exec) {
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExecutable().toString()
            def mypermission = 'android.permission.WRITE_EXTERNAL_STORAGE '
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTestProvider.get().dependsOn "configDevice2${variant.name.capitalize()}"
    }
}
