description = 'An Android library to display OpenStreetMap views.'
apply plugin: 'com.android.library'
apply plugin: "maven-publish"


group = project.property("pom.groupId")
version =  project.property("pom.version")


android {
    namespace = 'org.osmdroid.library' // Add this line
    compileSdkVersion = findProperty('android.compileSdkVersion').toInteger()

    defaultConfig{
        minSdkVersion 23
        targetSdkVersion findProperty('android.targetSdkVersion').toInteger()
    }

    lintOptions {
        abortOnError = false
    }
	testOptions { 
       unitTests.returnDefaultValues = true
   }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
    gradle.projectsEvaluated {
        preBuild.dependsOn(copyFiles)
    }
}

dependencies {
    implementation 'androidx.core:core:1.16.0'
    testImplementation "org.junit.vintage:junit-vintage-engine:${project.property('junit.version')}"
    testImplementation "org.robolectric:robolectric:${project.property('robolectric.version')}"
}

tasks.register('cleanCustomFiles', Delete) {
    delete file('src/main/java/org/osmdroid/OsmdroidBuildInfo.java')
}


import org.apache.tools.ant.filters.*

tasks.register('copyFiles', Copy) {
    from 'src/main/filtered/org/osmdroid'
    into 'src/main/java/org/osmdroid'
    filter(ReplaceTokens, tokens: [
            "pom.version": project.property("pom.version"),
            "date"       : new Date().toString()
    ])
}


gradle.projectsEvaluated {
    def copyTask = rootProject.findProject(":osmdroid-android")?.tasks?.findByName("copyFiles")
    if (copyTask != null) {
        allprojects.each { proj ->
            proj.tasks.configureEach { t ->
                def name = t.name.toLowerCase()
                if (name.contains("java") || name.contains("annotations") || name.contains("sources") || name.contains("prebuild")) {
                    t.dependsOn(copyTask)
                }
            }
        }
    }
}

afterEvaluate {
    tasks.withType(JavaCompile).configureEach { compileTask ->
        compileTask.dependsOn(copyFiles)
    }
    tasks.configureEach { t ->
        if (t.name.toLowerCase().contains("java") || t.name.toLowerCase().contains("annotations")) {
            t.dependsOn(copyFiles)
        }
    }
    tasks.configureEach { t ->
        def name = t.name.toLowerCase()
        if (name.contains("java") || name.contains("annotations") || name.contains("sources")) {
            t.dependsOn(copyFiles)
        }
    }
    def copyTask = rootProject.findProject(":osmdroid-android")?.tasks?.findByName("copyFiles")
    if (copyTask != null) {
        tasks.configureEach { t ->
            def n = t.name.toLowerCase()
            if (n.contains("java") || n.contains("annotations") || n.contains("sources") || n.contains("prebuild")) {
                t.dependsOn(copyTask)
            }
        }
    }
    publishing {

        publications {
            release(MavenPublication) {
                from components.release
                groupId = project.property("pom.groupId")
                artifactId = project.name
                version = project.property("pom.version")
                pom {
                    description =  project.description
                    url = project.property("pom.url")

                    //scm, organization and developers are injected via other mechanisms

                    licenses {
                        license {
                            name=project.property("pom.licenses.license.0.name");
                            url=project.property("pom.licenses.license.0.url");
                            distribution==project.property("pom.licenses.license.0.distribution");
                        }

                    }
                }
            }
        }
    }


}


tasks.register('androidSourcesJar', Jar) {
    from android.sourceSets.main.java.srcDirs
}

artifacts {
//    archives packageReleaseJar
    archives androidSourcesJar

}
clean.dependsOn(copyFiles)
build.dependsOn(copyFiles)
copyFiles.dependsOn(cleanCustomFiles)